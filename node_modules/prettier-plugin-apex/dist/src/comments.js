"use strict";
/* eslint no-param-reassign: 0, no-plusplus: 0, no-else-return: 0, consistent-return: 0 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasPrettierIgnore = exports.handleRemainingComment = exports.handleEndOfLineComment = exports.handleOwnLineComment = exports.getTrailingComments = exports.willPrintOwnComments = exports.isBlockComment = exports.canAttachComment = exports.printDanglingComment = exports.printComment = exports.isPrettierIgnore = void 0;
const prettier_1 = __importDefault(require("prettier"));
const util_1 = require("./util");
const { concat, join, lineSuffix, hardline } = prettier_1.default.doc.builders;
const { addDanglingComment, addLeadingComment, addTrailingComment, hasNewlineInRange, skipWhitespace, } = prettier_1.default.util;
const constants = require("./constants");
const apexTypes = constants.APEX_TYPES;
/**
 * Print ApexDoc comment. This is straight from prettier handling of JSDoc
 * @param comment the comment to print.
 */
function printApexDocComment(comment) {
    const lines = comment.value.split("\n");
    return concat([
        join(hardline, lines.map((commentLine, index) => (index > 0 ? " " : "") +
            (index < lines.length - 1
                ? commentLine.trim()
                : commentLine.trimLeft()))),
    ]);
}
function isPrettierIgnore(comment) {
    let content;
    if (comment["@class"] === apexTypes.BLOCK_COMMENT) {
        // For simplicity sake we only support this format
        // /* prettier-ignore */
        content = comment.value
            .trim()
            .substring(2, comment.value.length - 2)
            .trim();
    }
    else {
        content = comment.value.trim().substring(2).trim();
    }
    return content === "prettier-ignore";
}
exports.isPrettierIgnore = isPrettierIgnore;
function printComment(path) {
    // This handles both Inline and Block Comments.
    // We don't just pass through the value because unlike other string literals,
    // this should not be escaped
    const comment = path.getValue();
    let result;
    const node = path.getValue();
    if ((0, util_1.isApexDocComment)(node)) {
        result = printApexDocComment(node);
    }
    else {
        result = node.value;
    }
    if (comment.trailingEmptyLine) {
        result = concat([result, hardline]);
    }
    comment.printed = true;
    return result;
}
exports.printComment = printComment;
function printDanglingComment(commentPath, options) {
    const sourceCode = options.originalText;
    const comment = commentPath.getValue();
    const loc = comment.location;
    const isFirstComment = commentPath.getName() === 0;
    const parts = [];
    let fromPos = skipWhitespace(sourceCode, loc.startIndex - 1, {
        backwards: true,
    });
    if (fromPos === false) {
        return "";
    }
    fromPos += 1;
    const leadingSpace = sourceCode.slice(fromPos, loc.startIndex);
    const numberOfNewLines = isFirstComment
        ? 0
        : (leadingSpace.match(/\n/g) || []).length;
    if (numberOfNewLines > 0) {
        // If the leading space contains newlines, then add at most 2 new lines
        const numberOfNewLinesToInsert = Math.min(numberOfNewLines, 2);
        parts.push(...Array(numberOfNewLinesToInsert).fill(hardline));
    }
    if (comment["@class"] === apexTypes.INLINE_COMMENT) {
        parts.push(lineSuffix(printComment(commentPath)));
    }
    else {
        parts.push(printComment(commentPath));
    }
    comment.printed = true;
    return concat(parts);
}
exports.printDanglingComment = printDanglingComment;
/**
 * This is called by Prettier's comment handling code, in order for Prettier
 * to tell if this is a node to which a comment can be attached.
 *
 * @param node The current node
 * @returns {boolean} whether a comment can be attached to this node or not.
 */
function canAttachComment(node) {
    return (node.loc &&
        node["@class"] &&
        node["@class"] !== apexTypes.INLINE_COMMENT &&
        node["@class"] !== apexTypes.BLOCK_COMMENT);
}
exports.canAttachComment = canAttachComment;
/**
 * This is called by Prettier's comment handling code, in order to find out
 * if this is a block comment.
 *
 * @param comment The current comment node.
 * @returns {boolean} whether it is a block comment.
 */
function isBlockComment(comment) {
    return comment["@class"] === apexTypes.BLOCK_COMMENT;
}
exports.isBlockComment = isBlockComment;
/**
 * This is called by Prettier's comment handling code.
 * We can use this to tell Prettier that we will print comments manually on
 * certain nodes.
 * @returns {boolean} whether or not we will print the comment on this node manually.
 */
function willPrintOwnComments(path) {
    const node = path.getValue();
    return !node || !node["@class"] || node["@class"] === apexTypes.ANNOTATION;
}
exports.willPrintOwnComments = willPrintOwnComments;
function getTrailingComments(node) {
    return node.comments.filter((comment) => comment.trailing);
}
exports.getTrailingComments = getTrailingComments;
function handleDanglingComment(comment) {
    const { enclosingNode } = comment;
    if (enclosingNode &&
        constants.ALLOW_DANGLING_COMMENTS.indexOf(enclosingNode["@class"]) !== -1 &&
        ((enclosingNode.stmnts && enclosingNode.stmnts.length === 0) ||
            (enclosingNode.members && enclosingNode.members.length === 0))) {
        addDanglingComment(enclosingNode, comment, null);
        return true;
    }
    return false;
}
/**
 * Turn the leading comment to a WhereExpression inside a
 * WhereCompoundExpression into a trailing comment to the previous WhereExpression.
 * The reason is that a WhereExpression does not contain the location of
 * the WhereCompoundOp (e.g. AND, OR), and without doing that, the following
 * transformation occurs:
 * ```
 * SELECT Id
 * FROM Contact
 * WHERE
 *   Name = 'Name'
 *   AND
 *     // Comment
 *     Name = 'Another Name'
 * ```
 * Instead, this looks better:
 * ```
 * SELECT Id
 * FROM Contact
 * WHERE
 *   Name = 'Name'
 *   // Comment
 *   AND Name = 'Another Name'
 * ```
 */
function handleWhereExpression(comment, sourceCode) {
    const { enclosingNode, precedingNode, followingNode } = comment;
    if (!enclosingNode ||
        !precedingNode ||
        !followingNode ||
        !precedingNode["@class"] ||
        !followingNode["@class"] ||
        enclosingNode["@class"] !== apexTypes.WHERE_COMPOUND_EXPRESSION ||
        comment.location === undefined ||
        comment.location.startIndex === undefined) {
        return false;
    }
    if (hasNewlineInRange(sourceCode, precedingNode.loc.endIndex, comment.location.startIndex)) {
        addTrailingComment(precedingNode, comment);
        return true;
    }
    return false;
}
/**
 * Bring leading comment before Block Statement into the block itself:
 * ```
 * for (
 *   Contact a: [SELECT Id FROM Contact]
 *   // Trailing EOL Inline comment
 * ) {
 *   System.debug('Hello');
 * }
 * ```
 * transformed into
 * ```
 * for (Contact a: [SELECT Id FROM Contact]) {
 *   // Trailing EOL Inline Comment
 *   System.debug('Hello');
 * }
 * ```
 */
function handleBlockStatementLeadingComment(comment) {
    const { followingNode } = comment;
    if (!followingNode || followingNode["@class"] !== apexTypes.BLOCK_STATEMENT) {
        return false;
    }
    if (followingNode.stmnts.length) {
        addLeadingComment(followingNode.stmnts[0], comment);
    }
    else {
        addDanglingComment(followingNode, comment, null);
    }
    return true;
}
/**
 * In a binaryish expression, if there is an end of line comment, we want to
 * attach it to the right child expression instead of the entire binaryish
 * expression, because doing the latter can lead to unstable comments in
 * certain situations.
 */
function handleBinaryishExpressionRightChildTrailingComment(comment) {
    const { precedingNode } = comment;
    if (comment.placement !== "endOfLine" ||
        !precedingNode ||
        !(0, util_1.isBinaryish)(precedingNode)) {
        return false;
    }
    addTrailingComment(precedingNode.right, comment);
    return true;
}
/**
 * Turn the leading comment in a long method or variable chain into the preceding
 * comment of a previous node. Without doing that, we have an awkward position
 * for the . character like so:
 * ```
 * return StringBuilder()
 *   .// Test Comment
 *   append('Hello')
 *   .toString();
 * ```
 * Instead, this looks better:
 * ```
 * return StringBuilder()
 *   // Test Comment
 *   .append('Hello')
 *   .toString();
 * ```
 */
function handleLongChainComment(comment) {
    const { enclosingNode, precedingNode, followingNode } = comment;
    if (!enclosingNode ||
        !precedingNode ||
        !followingNode ||
        (enclosingNode["@class"] !== apexTypes.METHOD_CALL_EXPRESSION &&
            enclosingNode["@class"] !== apexTypes.VARIABLE_EXPRESSION)) {
        return false;
    }
    if (enclosingNode.dottedExpr &&
        enclosingNode.dottedExpr.value === precedingNode) {
        addTrailingComment(precedingNode, comment);
        return true;
    }
    return false;
}
/**
 * #383 (bug number 2) - If a prettier-ignore comment is attached to a modifier,
 * we need to bring it up a level, otherwise the only thing that's getting
 * ignored is the modifier itself, not the expression surrounding it (which is
 * more likely what the user wants).
 */
function handleModifierPrettierIgnoreComment(comment) {
    const { enclosingNode, followingNode } = comment;
    if (!isPrettierIgnore(comment) ||
        !enclosingNode ||
        !followingNode ||
        !followingNode["@class"] ||
        !followingNode["@class"].startsWith(apexTypes.MODIFIER)) {
        return false;
    }
    addLeadingComment(enclosingNode, comment);
    return true;
}
/**
 * This is called by Prettier's comment handling code, in order to handle
 * comments that are on their own line.
 *
 * @param comment The comment node.
 * @param sourceCode The entire source code.
 * @returns {boolean} Whether we have manually attached this comment to some AST
 * node. If `true` is returned, Prettier will no longer try to attach this
 * comment based on its internal heuristic.
 */
function handleOwnLineComment(comment, sourceCode) {
    return (handleDanglingComment(comment) ||
        handleBlockStatementLeadingComment(comment) ||
        handleWhereExpression(comment, sourceCode) ||
        handleModifierPrettierIgnoreComment(comment) ||
        handleLongChainComment(comment));
}
exports.handleOwnLineComment = handleOwnLineComment;
/**
 * This is called by Prettier's comment handling code, in order to handle
 * comments that have preceding text but no trailing text on a line.
 *
 * @param comment The comment node.
 * @param sourceCode The entire source code.
 * @returns {boolean} Whether we have manually attached this comment to some AST
 * node. If `true` is returned, Prettier will no longer try to attach this
 * comment based on its internal heuristic.
 */
function handleEndOfLineComment(comment, sourceCode) {
    return (handleDanglingComment(comment) ||
        handleBinaryishExpressionRightChildTrailingComment(comment) ||
        handleBlockStatementLeadingComment(comment) ||
        handleWhereExpression(comment, sourceCode) ||
        handleModifierPrettierIgnoreComment(comment) ||
        handleLongChainComment(comment));
}
exports.handleEndOfLineComment = handleEndOfLineComment;
/**
 * This is called by Prettier's comment handling code, in order to handle
 * comments that have both preceding text and trailing text on a line.
 *
 * @param comment The comment node.
 * @param sourceCode The entire source code.
 * @returns {boolean} Whether we have manually attached this comment to some AST
 * node. If `true` is returned, Prettier will no longer try to attach this
 * comment based on its internal heuristic.
 */
function handleRemainingComment(comment, sourceCode) {
    return (handleWhereExpression(comment, sourceCode) ||
        handleModifierPrettierIgnoreComment(comment) ||
        handleLongChainComment(comment));
}
exports.handleRemainingComment = handleRemainingComment;
/**
 * This is called by Prettier's comment handling code, in order to find out
 * if a node should be formatted or not.
 * @param path The FastPath object.
 * @returns {boolean} Whether the path should be formatted.
 */
function hasPrettierIgnore(path) {
    const node = path.getValue();
    return (node &&
        node.comments &&
        node.comments.length > 0 &&
        node.comments.filter(isPrettierIgnore).length > 0);
}
exports.hasPrettierIgnore = hasPrettierIgnore;
//# sourceMappingURL=data:application/json;base64,
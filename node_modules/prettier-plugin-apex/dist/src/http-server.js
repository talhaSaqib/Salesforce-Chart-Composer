"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stop = exports.start = void 0;
const child_process_1 = require("child_process");
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const axios_1 = __importDefault(require("axios"));
const wait_on_1 = __importDefault(require("wait-on"));
const util_2 = require("./util");
const waitOnPromise = util_1.default.promisify(wait_on_1.default);
async function start(host, port, allowedOrigins) {
    let serializerBin = (0, util_2.getSerializerBinDirectory)();
    if (process.platform === "win32") {
        serializerBin = path_1.default.join(serializerBin, "apex-ast-serializer-http.bat");
    }
    else {
        serializerBin = path_1.default.join(serializerBin, "apex-ast-serializer-http");
    }
    const args = ["-s", "-a", "secret", "-h", host, "-p", port.toString()];
    if (allowedOrigins !== undefined) {
        args.push("-c", allowedOrigins);
    }
    const command = (0, child_process_1.spawn)(serializerBin, args, {
        stdio: "inherit",
    });
    await waitOnPromise({
        resources: [`http://${host}:${port}/api/ast`],
    });
    // eslint-disable-next-line no-console
    console.log(`Server listening on http://${host}:${port}`);
    return command;
}
exports.start = start;
async function stop(host, port) {
    return axios_1.default.post(`http://${host}:${port}/shutdown`, null, {
        params: {
            token: "secret",
        },
    });
}
exports.stop = stop;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1zZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaHR0cC1zZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsaURBQW9EO0FBQ3BELGdEQUF3QjtBQUN4QixnREFBd0I7QUFDeEIsa0RBQTZDO0FBQzdDLHNEQUE2QjtBQUM3QixpQ0FBbUQ7QUFFbkQsTUFBTSxhQUFhLEdBQUcsY0FBSSxDQUFDLFNBQVMsQ0FBQyxpQkFBTSxDQUFDLENBQUM7QUFFdEMsS0FBSyxVQUFVLEtBQUssQ0FDekIsSUFBWSxFQUNaLElBQVksRUFDWixjQUF1QjtJQUV2QixJQUFJLGFBQWEsR0FBRyxJQUFBLGdDQUF5QixHQUFFLENBQUM7SUFDaEQsSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLE9BQU8sRUFBRTtRQUNoQyxhQUFhLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsOEJBQThCLENBQUMsQ0FBQztLQUMxRTtTQUFNO1FBQ0wsYUFBYSxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLDBCQUEwQixDQUFDLENBQUM7S0FDdEU7SUFDRCxNQUFNLElBQUksR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZFLElBQUksY0FBYyxLQUFLLFNBQVMsRUFBRTtRQUNoQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxjQUFjLENBQUMsQ0FBQztLQUNqQztJQUNELE1BQU0sT0FBTyxHQUFHLElBQUEscUJBQUssRUFBQyxhQUFhLEVBQUUsSUFBSSxFQUFFO1FBQ3pDLEtBQUssRUFBRSxTQUFTO0tBQ2pCLENBQUMsQ0FBQztJQUVILE1BQU0sYUFBYSxDQUFDO1FBQ2xCLFNBQVMsRUFBRSxDQUFDLFVBQVUsSUFBSSxJQUFJLElBQUksVUFBVSxDQUFDO0tBQzlDLENBQUMsQ0FBQztJQUNILHNDQUFzQztJQUN0QyxPQUFPLENBQUMsR0FBRyxDQUFDLDhCQUE4QixJQUFJLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztJQUUxRCxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDO0FBMUJELHNCQTBCQztBQUVNLEtBQUssVUFBVSxJQUFJLENBQUMsSUFBWSxFQUFFLElBQVk7SUFDbkQsT0FBTyxlQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLElBQUksV0FBVyxFQUFFLElBQUksRUFBRTtRQUN6RCxNQUFNLEVBQUU7WUFDTixLQUFLLEVBQUUsUUFBUTtTQUNoQjtLQUNGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFORCxvQkFNQyJ9
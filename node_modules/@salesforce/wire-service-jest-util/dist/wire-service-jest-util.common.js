'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
class TestWireAdapterTemplate {
  static emit(value, filterFn) {
    let instances = Array.from(this._wireInstances);

    if (typeof filterFn === 'function') {
      instances = instances.filter(instance => filterFn(instance.getConfig()));
    }

    instances.forEach(instance => instance.emit(value));
  }

  static getLastConfig() {
    return this._lastConfig;
  }

  constructor(dataCallback) {
    _defineProperty(this, "_dataCallback", void 0);

    _defineProperty(this, "config", {});

    this._dataCallback = dataCallback;

    this.constructor._wireInstances.add(this);
  }

  update(config) {
    this.config = config;
    this.constructor._lastConfig = config;
  }

  connect() {
    this.constructor._lastConfig = {};

    this.constructor._wireInstances.add(this);
  }

  disconnect() {
    this.constructor._wireInstances.delete(this);
  }

  emit(value) {
    this._dataCallback(value);
  }

  getConfig() {
    return this.config;
  }

}

_defineProperty(TestWireAdapterTemplate, "_lastConfig", null);

_defineProperty(TestWireAdapterTemplate, "_wireInstances", new Set());

function buildTestWireAdapter() {
  var _class;

  return _class = class TestWireAdapter extends TestWireAdapterTemplate {}, _defineProperty(_class, "_lastConfig", null), _defineProperty(_class, "_wireInstances", new Set()), _class;
}

function buildErrorObject$1({
  body,
  status,
  statusText
}) {
  if (status && (status < 400 || status > 599)) {
    throw new Error("'status' must be >= 400 or <= 599");
  }

  body = body || {
    message: 'An internal server error has occurred'
  };
  status = status || 400;
  statusText = statusText || 'Bad Request';
  return {
    body,
    ok: false,
    status,
    statusText
  };
}

class ApexTestWireAdapterTemplate extends TestWireAdapterTemplate {
  static emit(value, filterFn) {
    super.emit({
      data: value,
      error: undefined
    }, filterFn);
  }

  static emitError(errorOptions, filterFn) {
    const err = buildErrorObject$1(errorOptions || {});
    super.emit({
      data: undefined,
      error: err
    }, filterFn);
  }

  static error(body, status, statusText) {
    const err = buildErrorObject$1({
      body,
      status,
      statusText
    });
    super.emit({
      data: undefined,
      error: err
    });
  }

  constructor(dataCallback) {
    super(dataCallback);
    this.emit({
      data: undefined,
      error: undefined
    });
  }

}

function buildApexTestWireAdapter() {
  var _class;

  return _class = class ApexTestWireAdapter extends ApexTestWireAdapterTemplate {}, _defineProperty(_class, "_lastConfig", null), _defineProperty(_class, "_wireInstances", new Set()), _class;
}

function buildErrorObject({
  body,
  status,
  statusText
}) {
  if (status && (status < 400 || status > 599)) {
    throw new Error("'status' must be >= 400 or <= 599");
  }

  body = body || [{
    errorCode: 'NOT_FOUND',
    message: 'The requested resource does not exist'
  }];
  status = status || 404;
  statusText = statusText || 'NOT_FOUND';
  return {
    body,
    ok: false,
    status,
    statusText
  };
}

class LdsTestWireAdapterTemplate extends TestWireAdapterTemplate {
  static emit(value, filterFn) {
    super.emit({
      data: value,
      error: undefined
    }, filterFn);
  }

  static emitError(errorOptions, filterFn) {
    const err = buildErrorObject(errorOptions || {});
    super.emit({
      data: undefined,
      error: err
    }, filterFn);
  }

  static error(body, status, statusText) {
    const err = buildErrorObject({
      body,
      status,
      statusText
    });
    super.emit({
      data: undefined,
      error: err
    });
  }

  constructor(dataCallback) {
    super(dataCallback);
    this.emit({
      data: undefined,
      error: undefined
    });
  }

}

function buildLdsTestWireAdapter() {
  var _class;

  return _class = class LdsTestWireAdapter extends LdsTestWireAdapterTemplate {}, _defineProperty(_class, "_lastConfig", null), _defineProperty(_class, "_wireInstances", new Set()), _class;
}

/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
// Provides temporary backward compatibility for wire-protocol reform (lwc > 1.5.0). This code
// should be removed once all adapters are migrated to the the API.
const wireAdaptersRegistryHack = global.wireAdaptersRegistryHack || new Map();
function deprecatedRegisterAdapter(adapterId, TestWireAdapter) {
  const eventTargetToAdapterMap = new WeakMap();
  const spy = {
    createInstance(wiredEventTarget) {
      eventTargetToAdapterMap.set(wiredEventTarget, new TestWireAdapter(data => wiredEventTarget.emit(data)));
    },

    connect(wiredEventTarget) {
      const wireInstance = eventTargetToAdapterMap.get(wiredEventTarget);

      if (wireInstance) {
        wireInstance.connect();
      }
    },

    update(wiredEventTarget, config) {
      const wireInstance = eventTargetToAdapterMap.get(wiredEventTarget);

      if (wireInstance) {
        wireInstance.update(config);
      }
    },

    disconnect(wiredEventTarget) {
      const wireInstance = eventTargetToAdapterMap.get(wiredEventTarget);

      if (wireInstance) {
        wireInstance.disconnect();
      }
    }

  };
  const relatedAdapter = wireAdaptersRegistryHack.get(adapterId);

  if (relatedAdapter) {
    relatedAdapter.adapter.spyAdapter(spy);
  }
}

/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
const MIGRATION_LINK = 'https://github.com/salesforce/wire-service-jest-util/blob/master/docs/migrating-from-version-2.x-to-3.x.md';
const knownAdapterMocks = new WeakSet();

function getMigrationMessageFor(registerFnName) {
  return `${registerFnName} is deprecated. More details: ${MIGRATION_LINK}`;
}

function validateAdapterId(adapterId) {
  if (!adapterId) {
    throw new Error('No adapter specified');
  }
}

function isWireAdapterMock(adapter) {
  return knownAdapterMocks.has(adapter);
}
/**
 * @deprecated
 */


function registerLdsTestWireAdapter(identifier) {
  validateAdapterId(identifier);
  console.warn(getMigrationMessageFor('registerLdsTestWireAdapter'));

  if (!isWireAdapterMock(identifier)) {
    const spy = buildLdsTestWireAdapter();
    deprecatedRegisterAdapter(identifier, spy);
    return spy;
  }

  return identifier;
}
/**
 * @deprecated
 */


function registerApexTestWireAdapter(identifier) {
  validateAdapterId(identifier);
  console.warn(getMigrationMessageFor('registerApexTestWireAdapter'));

  if (!isWireAdapterMock(identifier)) {
    const spy = buildApexTestWireAdapter();
    deprecatedRegisterAdapter(identifier, spy);
    return spy;
  }

  return identifier;
}
/**
 * @deprecated
 */


function registerTestWireAdapter(identifier) {
  validateAdapterId(identifier);
  console.warn(getMigrationMessageFor('registerTestWireAdapter'));

  if (!isWireAdapterMock(identifier)) {
    const testAdapter = buildTestWireAdapter();
    deprecatedRegisterAdapter(identifier, testAdapter);
    return testAdapter;
  }

  return identifier;
}

function createWireAdapterMock(fn, TestWireAdapter) {
  let testAdapter = TestWireAdapter;

  if (typeof fn === "function") {
    testAdapter = fn;
    Object.defineProperty(fn, 'adapter', {
      value: TestWireAdapter
    });
    Object.setPrototypeOf(fn, TestWireAdapter);
  }

  knownAdapterMocks.add(testAdapter);
  return testAdapter;
}

function createApexTestWireAdapter(fn) {
  return createWireAdapterMock(fn, buildApexTestWireAdapter());
}

function createLdsTestWireAdapter(fn) {
  return createWireAdapterMock(fn, buildLdsTestWireAdapter());
}

function createTestWireAdapter(fn) {
  return createWireAdapterMock(fn, buildTestWireAdapter());
}

exports.createApexTestWireAdapter = createApexTestWireAdapter;
exports.createLdsTestWireAdapter = createLdsTestWireAdapter;
exports.createTestWireAdapter = createTestWireAdapter;
exports.registerApexTestWireAdapter = registerApexTestWireAdapter;
exports.registerLdsTestWireAdapter = registerLdsTestWireAdapter;
exports.registerTestWireAdapter = registerTestWireAdapter;

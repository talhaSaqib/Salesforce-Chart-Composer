import { CustomRendererConfig } from '@lwc/template-compiler';
type RecursiveRequired<T> = {
    [P in keyof T]-?: RecursiveRequired<T[P]>;
};
export type CustomPropertiesResolution = {
    type: 'native';
} | {
    type: 'module';
    name: string;
};
export interface StylesheetConfig {
    customProperties?: {
        resolution?: CustomPropertiesResolution;
    };
}
export interface OutputConfig {
    /**
     * If `true` a source map is generated for the transformed file.
     * @default false
     */
    sourcemap?: boolean;
    /**
     * @deprecated The minify property has no effect on the generated output.
     */
    minify?: boolean;
}
export interface DynamicImportConfig {
    loader?: string;
    strictSpecifier?: boolean;
}
export interface TransformOptions {
    name?: string;
    namespace?: string;
    stylesheetConfig?: StylesheetConfig;
    experimentalDynamicComponent?: DynamicImportConfig;
    experimentalDynamicDirective?: boolean;
    enableDynamicComponents?: boolean;
    experimentalComplexExpressions?: boolean;
    outputConfig?: OutputConfig;
    isExplicitImport?: boolean;
    preserveHtmlComments?: boolean;
    scopedStyles?: boolean;
    enableStaticContentOptimization?: boolean;
    customRendererConfig?: CustomRendererConfig;
    enableLwcSpread?: boolean;
    disableSyntheticShadowSupport?: boolean;
}
type RequiredTransformOptions = Omit<TransformOptions, 'name' | 'namespace' | 'scopedStyles' | 'customRendererConfig' | 'enableLwcSpread' | 'enableDynamicComponents' | 'experimentalDynamicDirective' | 'experimentalDynamicComponent'>;
export interface NormalizedTransformOptions extends RecursiveRequired<RequiredTransformOptions> {
    name?: string;
    namespace?: string;
    scopedStyles?: boolean;
    customRendererConfig?: CustomRendererConfig;
    enableLwcSpread?: boolean;
    enableDynamicComponents?: boolean;
    experimentalDynamicDirective?: boolean;
    experimentalDynamicComponent?: DynamicImportConfig;
}
export declare function validateTransformOptions(options: TransformOptions): NormalizedTransformOptions;
export {};

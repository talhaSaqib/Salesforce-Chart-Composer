"use strict";
/*
 * Copyright (c) 2023, salesforce.com, inc.
 * All rights reserved.
 * SPDX-License-Identifier: MIT
 * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/MIT
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bindComplexExpression = void 0;
const estree_walker_1 = require("estree-walker");
const errors_1 = require("@lwc/errors");
const t = __importStar(require("../shared/estree"));
const constants_1 = require("../shared/constants");
/**
 * Bind the passed expression to the component instance. It applies the following
 * transformation to the expression:
 *    {value} --> {$cmp.value}
 *    {value[index]} --> {$cmp.value[$cmp.index]}
 *    {foo ?? bar} --> {$cmp.foo ?? $cmp.bar}
 *    {foo?.bar} --> {$cmp.foo?.bar}
 *
 * However, parameter variables are not be transformed in this way. For example,
 * the following transformations do not happen:
 *    {(foo) => foo && bar} -> {(foo) => $cmp.foo && $cmp.bar}
 *    {(foo) => foo && bar} -> {($cmp.foo) => foo && $cmp.bar}
 *    {(foo) => foo && bar} -> {($cmp.foo) => $cmp.foo && $cmp.bar}
 *
 * Instead, the scopes are respected:
 *    {(foo) => foo && $cmp.bar}
 *
 * Similar checks occur for local identifiers introduced via for:each or similar.
 */
function bindComplexExpression(expression, codeGen) {
    const expressionScopes = new ExpressionScopes();
    (0, estree_walker_1.walk)(expression, {
        enter(node, _parent) {
            // Function and class expressions are not permitted in template expressions,
            // only arrow function expressions.
            if (t.isArrowFunctionExpression(node)) {
                expressionScopes.enterScope(node);
            }
        },
        leave(node, parent) {
            if (t.isArrowFunctionExpression(node)) {
                expressionScopes.exitScope(node);
            }
            else if (parent !== null &&
                t.isIdentifier(node) &&
                // Acorn parses `undefined` as an Identifier.
                node.name !== 'undefined' &&
                !(t.isMemberExpression(parent) && parent.property === node) &&
                !(t.isProperty(parent) && parent.key === node) &&
                !codeGen.isLocalIdentifier(node) &&
                !expressionScopes.isScopedToExpression(node)) {
                this.replace(t.memberExpression(t.identifier(constants_1.TEMPLATE_PARAMS.INSTANCE), node));
            }
        },
    });
    return expression;
}
exports.bindComplexExpression = bindComplexExpression;
/**
 * Track the variables that come in and out of scope in various parts of a
 * template expression. Arrow functions can return arrow functions, which can lead to
 * variable shadowing, which needs to be handled correctly.
 */
class ExpressionScopes {
    constructor() {
        this.variableShadowingCount = new Map();
        this.arrowFnVariables = new Map();
    }
    enterScope(node) {
        var _a;
        const variableNamesIntroduced = new Set();
        for (const param of node.params) {
            collectParams(param, variableNamesIntroduced);
        }
        for (const varName of variableNamesIntroduced) {
            this.variableShadowingCount.set(varName, ((_a = this.variableShadowingCount.get(varName)) !== null && _a !== void 0 ? _a : 0) + 1);
        }
        this.arrowFnVariables.set(node, variableNamesIntroduced);
    }
    exitScope(node) {
        const varNames = this.arrowFnVariables.get(node);
        if (varNames) {
            for (const varName of varNames) {
                this.variableShadowingCount.set(varName, this.variableShadowingCount.get(varName) - 1);
            }
        }
    }
    // If a variable was introduced as an arrow function parameter and is still
    // in scope, return true. Otherwise, return false.
    isScopedToExpression(node) {
        return !!this.variableShadowingCount.get(node.name);
    }
}
function collectParams(node, vars) {
    if (t.isIdentifier(node)) {
        collectParamsFromIdentifier(node, vars);
    }
    else if (t.isObjectPattern(node)) {
        collectParamsFromObjectPattern(node, vars);
    }
    else if (t.isProperty(node)) {
        collectParamsFromProperty(node, vars);
    }
    else if (t.isArrayPattern(node)) {
        collectParamsFromArrayPattern(node, vars);
    }
    else if (t.isRestElement(node)) {
        collectParamsFromRestElement(node, vars);
    }
    else if (t.isAssignmentPattern(node)) {
        collectParamsFromAssignmentPattern(node, vars);
    }
    else if (t.isMemberExpression(node)) {
        collectParamsFromMemberExpression(node, vars);
    }
    else {
        (0, errors_1.invariant)(false, errors_1.ParserDiagnostics.INVALID_EXPR_ARROW_FN_PARAM, [node.type]);
    }
}
function collectParamsFromIdentifier(node, vars) {
    vars.add(node.name);
}
function collectParamsFromObjectPattern(node, vars) {
    for (const property of node.properties) {
        collectParams(property, vars);
    }
}
function collectParamsFromProperty(node, vars) {
    collectParams(node.value, vars);
}
function collectParamsFromArrayPattern(node, vars) {
    for (const element of node.elements) {
        // Elements of an array pattern can be null.
        if (element) {
            collectParams(element, vars);
        }
    }
}
function collectParamsFromRestElement(node, vars) {
    collectParams(node.argument, vars);
}
function collectParamsFromAssignmentPattern(_node, _vars) {
    (0, errors_1.invariant)(false, errors_1.ParserDiagnostics.INVALID_EXPR_ARROW_FN_PARAM, ['default parameters']);
}
function collectParamsFromMemberExpression(_node, _vars) {
    // It is unclear how this condition could ever be reached. But because it is allowed by
    // the AST, we'll validate anyway.
    (0, errors_1.invariant)(false, errors_1.ParserDiagnostics.INVALID_EXPR_ARROW_FN_PARAM, ['member expressions']);
}
//# sourceMappingURL=expression.js.map
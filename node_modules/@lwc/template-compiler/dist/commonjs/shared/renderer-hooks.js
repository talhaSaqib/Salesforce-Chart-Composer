"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCustomRendererHookRequired = void 0;
const types_1 = require("./types");
function checkElement(element, state) {
    // Custom elements are not allowed to have a custom renderer hook.
    // The renderer is cascaded down from the owner(custom element) to all its child nodes who
    // do not have a renderer specified.
    // lwc:component will resolve to a custom element at runtime.
    if (element.type === 'Component' || element.name === 'lwc:component') {
        return false;
    }
    const { attributes, directives } = element;
    if (directives.length) {
        let directiveMatched = false;
        // If any directives require custom renderer
        directiveMatched = directives.some((dir) => {
            return state.crDirectives.has(types_1.ElementDirectiveName[dir.name]);
        });
        if (directiveMatched) {
            return true;
        }
    }
    const elementConfig = state.crElmToConfigMap[element.name];
    // If element requires custom renderer
    if (elementConfig) {
        const { namespace, attributes: attrConfig } = elementConfig;
        // if element config has namespace, then namespace has to be a match
        if (namespace && element.namespace !== namespace) {
            return false;
        }
        // If no attributes are specified, then consider the element requires custom renderer
        if (attrConfig.size === 0 ||
            attributes.some((attribute) => attrConfig.has(attribute.name))) {
            return true;
        }
    }
    return false;
}
function isCustomRendererHookRequired(element, state) {
    let addCustomRenderer = false;
    if (state.config.customRendererConfig) {
        const cachedResult = state.crCheckedElements.get(element);
        if (cachedResult !== undefined) {
            return cachedResult;
        }
        else {
            addCustomRenderer = checkElement(element, state);
            state.crCheckedElements.set(element, addCustomRenderer);
        }
    }
    return addCustomRenderer;
}
exports.isCustomRendererHookRequired = isCustomRendererHookRequired;
//# sourceMappingURL=renderer-hooks.js.map